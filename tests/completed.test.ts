import { Enumerable } from "../src/enumerable/enumerable"

const errorText: string = "Cannot iterate over an already completed sequence";

describe("IsCompleted", () => {
  it("Testing the IsCompleted function in toArray", () => {
    const query = new Enumerable([1, 2, 3, 4, 5])
    query.toArray()
    expect(() => query.any()).toThrow(errorText)
    expect(() => query.elementAt(1)).toThrow(errorText)
    expect(() => query.select((v) => v * 2)).toThrow(errorText)
    expect(() => query.skip(2)).toThrow(errorText)
    expect(() => query.skipWhile((v) => v === 2)).toThrow(errorText)
    expect(() => query.slice(1, 2)).toThrow(errorText)
    expect(() => query.take(3)).toThrow(errorText)
    expect(() => query.takeWhile((v) => v === 1)).toThrow(errorText)
    expect(() => query.where(v => v === 1)).toThrow(errorText)
    expect(() => query.elementAtOrDefault(1, 123123123)).toThrow(errorText)
    expect(() => query.buffer(15)).toThrow(errorText)
    expect(() => query.first()).toThrow(errorText)
    expect(() => query.firstOrDefault()).toThrow(errorText)
  })
  it("Testing the IsCompleted function in toDictionary", () => {
    const query = new Enumerable([1, 2, 3, 4, 5])
    query.toDictionary()
    expect(() => query.any()).toThrow(errorText)
    expect(() => query.elementAt(1)).toThrow(errorText)
    expect(() => query.select((v) => v * 2)).toThrow(errorText)
    expect(() => query.skip(2)).toThrow(errorText)
    expect(() => query.skipWhile((v) => v === 2)).toThrow(errorText)
    expect(() => query.slice(1, 2)).toThrow(errorText)
    expect(() => query.take(3)).toThrow(errorText)
    expect(() => query.takeWhile((v) => v === 1)).toThrow(errorText)
    expect(() => query.where(v => v === 1)).toThrow(errorText)
    expect(() => query.elementAtOrDefault(1, 123123123)).toThrow(errorText)
    expect(() => query.buffer(15)).toThrow(errorText)
    expect(() => query.first()).toThrow(errorText)
    expect(() => query.firstOrDefault()).toThrow(errorText)
  })
})